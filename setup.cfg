[isort]
profile=black
line_length=100
color_output=true

[flake8]
exclude=.venv
max-line-length=100
color=always
extend-ignore= E402
# E402: module level import not at top of file

[pylint]
ignore-paths=^(.*/|)venv/.*$
persistent=yes
jobs=1
unsafe-load-any-extension=no
extension-pkg-allow-list=lxml

[pylint.messages control]
disable=C0302,C0114,C0115,C0116,C0413,R0801,R0902,R0903,R0904,R0913,R0914,R0915,R0916,R0917,W0201
# C0302: Too many lines in module
# C0114: Missing module docstring
# C0115: Missing class docstring
# C0116: Missing function or method docstring
# C0413: Wrong import Position
# R0801: Similar lines in 2 files
# R0902: Too many instance attributes
# R0903: Too few public methods
# R0904: Too many public methods
# R0913: Too many arguments
# R0914: Too many local variables
# R0915: Too many statements
# R0916: Too many boolean expressions in if statement
# R0917: Too many positional arguments
# W0201: Attribute defined outside init

[pylint.reports]
# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=colorized
# Tells whether to display a full report or only the messages
reports=no
# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

[pylint.logging]
# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules=logging

[pylint.variables]
# Tells whether we should check for unused import in __init__ files.
init-import=no
# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=_$|dummy
# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,_cb

[pylint.typecheck]
# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

[pylint.similarities]
# Minimum lines number of a similarity.
min-similarity-lines=4
# Ignore comments when computing similarities.
ignore-comments=yes
# Ignore docstrings when computing similarities.
ignore-docstrings=yes
# Ignore imports when computing similarities.
ignore-imports=no

[pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO

[pylint.spelling]
# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words=no

[pylint.format]
# Maximum number of characters on a single line.
max-line-length=100
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$
# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no
# Maximum number of lines in a module
max-module-lines=1000
# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '
# Number of spaces of indent required inside a hanging  or continued line.
indent-after-paren=4

[pylint.basic]
# Good variable names which should always be accepted, separated by a comma
good-names=id,df,dt,i,j,k,l,m,_
# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata
# Include a hint for the correct naming format with invalid-name
include-naming-hint=yes
# Regular expression matching correct variable names
variable-rgx=[a-z_][a-z0-9_]{2,50}$
# Regular expression matching correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$
# Regular expression matching correct attribute names
attr-rgx=[a-z_][a-z0-9_]{2,50}$
# Regular expression matching correct method names
method-rgx=[a-z_][a-z0-9_]{2,80}$
# Regular expression matching correct argument names
argument-rgx=[a-z_][a-z0-9_]{2,50}$
# Regular expression matching correct constant names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$
# Regular expression matching correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$
# Regular expression matching correct inline iteration names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$
# Regular expression matching correct function names
function-rgx=[a-z_][a-z0-9_]{2,50}$
# Regular expression matching correct class attribute names
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,50}|(__.*__))$
# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_
# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

[pylint.elif]
# Maximum number of nested blocks for function / method body
max-nested-blocks=5

[pylint.designs]
# Maximum number of arguments for function / method
max-args=5
# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*
# Maximum number of locals for function / method body
max-locals=15
# Maximum number of return / yield for function / method body
max-returns=6
# Maximum number of branch for function / method body
max-branches=12
# Maximum number of statements in function / method body
max-statements=50
# Maximum number of parents for a class (see R0901).
max-parents=7
# Maximum number of attributes for a class (see R0902).
max-attributes=7
# Minimum number of public methods for a class (see R0903).
min-public-methods=2
# Maximum number of public methods for a class (see R0904).
max-public-methods=20
# Maximum number of boolean expressions in a if statement
max-bool-expr=5

[pylint.classes]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp
# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls
# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs
# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,_fields,_replace,_source,_make
